{
  
    
        "post0": {
            "title": "A Notebook test",
            "content": "import pandas as pd import numpy as np import matplotlib.pyplot as plt from src.trip import Trip from src.utils import generate_berm_zone from src.utils import transform_points_crs raw_data = pd.read_csv( &quot;../dev_data/anglo_vehicle_data_clean.csv&quot;, parse_dates=[&quot;datetime&quot;], dtype={&quot;vehicle&quot;: &quot;string&quot;}, ) hv_df = raw_data[(raw_data.vehicle == &quot;hv&quot;) &amp; (raw_data.speed != 0)] trip = Trip(hv_df) trip.head(3) . datetime latitude longitude heading speed elevation uid . 0 2021-04-08 01:16:28.300 | -23.958193 | 28.888732 | 179.662 | 9.161015 | 1041.417 | hv | . 1 2021-04-08 01:16:28.400 | -23.958196 | 28.888732 | 179.708 | 9.757640 | 1041.419 | hv | . 2 2021-04-08 01:16:28.500 | -23.958198 | 28.888730 | 179.667 | 10.608640 | 1041.380 | hv | . custom_zone = { &quot;maxSpeed&quot;: 20, &quot;points&quot;: [ {&quot;lat&quot;: -23.952352, &quot;lon&quot;: 28.890148}, {&quot;lat&quot;: -23.952058, &quot;lon&quot;: 28.891114}, {&quot;lat&quot;: -23.950361, &quot;lon&quot;: 28.890181}, {&quot;lat&quot;: -23.950803, &quot;lon&quot;: 28.889129}, {&quot;lat&quot;: -23.952401, &quot;lon&quot;: 28.890073}, ], } # Generate 10 zones for performance testing zone_list = [custom_zone for _ in range(10)] . # trip.check_speed_compliance(speed_zones=zone_list) . speed_compliance_events = trip.check_speed_compliance(speed_zones=zone_list) speed_compliance_events . datetime latitude longitude heading speed elevation uid compliance_event . 5219 2021-04-08 01:28:24.400 | -23.950798 | 28.890407 | 53.80499 | 20.02865 | 1123.684 | hv | speed_exceeded | . 5221 2021-04-08 01:28:24.600 | -23.950794 | 28.890417 | 55.04300 | 20.07491 | 1123.693 | hv | speed_exceeded | . 14423 2021-04-08 01:44:58.900 | -23.950946 | 28.890498 | 236.67200 | 26.76839 | 1123.614 | hv | speed_exceeded | . 14424 2021-04-08 01:44:59.000 | -23.950948 | 28.890492 | 235.98400 | 26.88364 | 1123.629 | hv | speed_exceeded | . 14425 2021-04-08 01:44:59.100 | -23.950951 | 28.890485 | 236.32000 | 26.47017 | 1123.601 | hv | speed_exceeded | . ... ... | ... | ... | ... | ... | ... | ... | ... | . 30498 2021-04-08 02:37:55.600 | -23.952170 | 28.890662 | 134.81800 | 21.75341 | 1125.420 | hv | speed_exceeded | . 30499 2021-04-08 02:37:55.700 | -23.952175 | 28.890665 | 135.13500 | 22.00446 | 1125.431 | hv | speed_exceeded | . 30500 2021-04-08 02:37:55.800 | -23.952180 | 28.890669 | 135.76300 | 21.95950 | 1125.466 | hv | speed_exceeded | . 30501 2021-04-08 02:37:55.900 | -23.952184 | 28.890674 | 137.10200 | 21.28388 | 1125.464 | hv | speed_exceeded | . 30502 2021-04-08 02:37:56.000 | -23.952188 | 28.890677 | 136.97700 | 21.23190 | 1125.506 | hv | speed_exceeded | . 150 rows × 8 columns . def plot_points_inside_zone(df, compliance_event, zone_lon, zone_lat): points_event = df[[&quot;latitude&quot;, &quot;longitude&quot;]][ df[&quot;compliance_event&quot;] == compliance_event ].to_numpy() points_not_event = df[[&quot;latitude&quot;, &quot;longitude&quot;]][ df[&quot;compliance_event&quot;] != compliance_event ].to_numpy() plt.figure(1) plt.plot(points_not_event[:, 1], points_not_event[:, 0], &quot;b:&quot;) plt.plot(points_event[:, 1], points_event[:, 0], &quot;rs&quot;) plt.plot(zone_lon, zone_lat) plt.figure(2) plt.scatter(points_event[:, 1], points_event[:, 0], c=&quot;r&quot;) plt.plot(zone_lon, zone_lat) plt.show() . zone_lat = [p[&quot;lat&quot;] for p in zone_list[0][&quot;points&quot;]] zone_lon = [p[&quot;lon&quot;] for p in zone_list[0][&quot;points&quot;]] plot_points_inside_zone( trip, compliance_event=&quot;speed_exceeded&quot;, zone_lon=zone_lon, zone_lat=zone_lat ) . custom_berm = { &quot;minDist&quot;: 2, &quot;points&quot;: [ {&quot;lat&quot;: -23.952352, &quot;lon&quot;: 28.890148}, {&quot;lat&quot;: -23.952058, &quot;lon&quot;: 28.891114}, {&quot;lat&quot;: -23.950361, &quot;lon&quot;: 28.890181}, {&quot;lat&quot;: -23.950803, &quot;lon&quot;: 28.889129}, ], } # Generate 10 zones for performance testing berm_list = [custom_berm for _ in range(10)] . trip.convert_lat_lon_to_xy() . # trip.check_berm_compliance(berms=berm_list) . berm_compliance_events = trip.check_berm_compliance(berms=berm_list) berm_compliance_events . datetime latitude longitude heading speed elevation uid compliance_event x y . 5218 2021-04-08 01:28:24.300 | -23.950801 | 28.890402 | 53.19702 | 19.85069 | 1123.671 | hv | berm_violated | 1.794378e+06 | 1.968801e+06 | . 5219 2021-04-08 01:28:24.400 | -23.950798 | 28.890407 | 53.80499 | 20.02865 | 1123.684 | hv | berm_violated | 1.794379e+06 | 1.968801e+06 | . 5220 2021-04-08 01:28:24.500 | -23.950796 | 28.890412 | 54.55798 | 19.84384 | 1123.680 | hv | berm_violated | 1.794379e+06 | 1.968801e+06 | . 5221 2021-04-08 01:28:24.600 | -23.950794 | 28.890417 | 55.04300 | 20.07491 | 1123.693 | hv | berm_violated | 1.794379e+06 | 1.968801e+06 | . 5222 2021-04-08 01:28:24.700 | -23.950792 | 28.890424 | 55.34698 | 19.92376 | 1123.700 | hv | berm_violated | 1.794380e+06 | 1.968802e+06 | . 5223 2021-04-08 01:28:24.800 | -23.950791 | 28.890429 | 55.28500 | 19.92727 | 1123.719 | hv | berm_violated | 1.794381e+06 | 1.968802e+06 | . 5224 2021-04-08 01:28:24.900 | -23.950789 | 28.890434 | 55.52301 | 20.02218 | 1123.745 | hv | berm_violated | 1.794381e+06 | 1.968802e+06 | . 14420 2021-04-08 01:44:58.600 | -23.950936 | 28.890518 | 235.20600 | 27.35687 | 1123.677 | hv | berm_violated | 1.794389e+06 | 1.968785e+06 | . 14421 2021-04-08 01:44:58.700 | -23.950939 | 28.890511 | 235.40500 | 27.21295 | 1123.665 | hv | berm_violated | 1.794389e+06 | 1.968785e+06 | . 14422 2021-04-08 01:44:58.800 | -23.950943 | 28.890505 | 236.34600 | 27.00593 | 1123.671 | hv | berm_violated | 1.794388e+06 | 1.968785e+06 | . 14423 2021-04-08 01:44:58.900 | -23.950946 | 28.890498 | 236.67200 | 26.76839 | 1123.614 | hv | berm_violated | 1.794387e+06 | 1.968784e+06 | . 14424 2021-04-08 01:44:59.000 | -23.950948 | 28.890492 | 235.98400 | 26.88364 | 1123.629 | hv | berm_violated | 1.794386e+06 | 1.968784e+06 | . 14425 2021-04-08 01:44:59.100 | -23.950951 | 28.890485 | 236.32000 | 26.47017 | 1123.601 | hv | berm_violated | 1.794386e+06 | 1.968784e+06 | . 21043 2021-04-08 02:19:54.300 | -23.950798 | 28.890403 | 51.56702 | 20.29099 | 1123.360 | hv | berm_violated | 1.794378e+06 | 1.968801e+06 | . 21044 2021-04-08 02:19:54.400 | -23.950796 | 28.890408 | 52.03400 | 20.22975 | 1123.348 | hv | berm_violated | 1.794379e+06 | 1.968801e+06 | . 21045 2021-04-08 02:19:54.500 | -23.950794 | 28.890413 | 52.32098 | 20.21551 | 1123.337 | hv | berm_violated | 1.794379e+06 | 1.968801e+06 | . 21046 2021-04-08 02:19:54.600 | -23.950792 | 28.890418 | 52.55600 | 20.38460 | 1123.342 | hv | berm_violated | 1.794380e+06 | 1.968802e+06 | . 21047 2021-04-08 02:19:54.700 | -23.950790 | 28.890423 | 52.91400 | 20.21532 | 1123.332 | hv | berm_violated | 1.794380e+06 | 1.968802e+06 | . 21048 2021-04-08 02:19:54.800 | -23.950788 | 28.890427 | 53.26401 | 20.32651 | 1123.330 | hv | berm_violated | 1.794381e+06 | 1.968802e+06 | . 21049 2021-04-08 02:19:54.900 | -23.950786 | 28.890434 | 53.75299 | 20.35019 | 1123.348 | hv | berm_violated | 1.794381e+06 | 1.968802e+06 | . 30160 2021-04-08 02:37:17.500 | -23.950943 | 28.890516 | 234.47100 | 23.68943 | 1122.328 | hv | berm_violated | 1.794389e+06 | 1.968785e+06 | . 30161 2021-04-08 02:37:17.600 | -23.950946 | 28.890511 | 235.02200 | 23.89275 | 1122.364 | hv | berm_violated | 1.794388e+06 | 1.968784e+06 | . 30162 2021-04-08 02:37:17.700 | -23.950949 | 28.890505 | 234.77000 | 23.53311 | 1122.315 | hv | berm_violated | 1.794388e+06 | 1.968784e+06 | . 30163 2021-04-08 02:37:17.800 | -23.950952 | 28.890500 | 235.29400 | 23.59879 | 1122.269 | hv | berm_violated | 1.794387e+06 | 1.968784e+06 | . 30164 2021-04-08 02:37:17.900 | -23.950954 | 28.890493 | 235.04200 | 23.84002 | 1122.272 | hv | berm_violated | 1.794387e+06 | 1.968783e+06 | . 30165 2021-04-08 02:37:18.000 | -23.950956 | 28.890488 | 234.66300 | 23.94085 | 1122.255 | hv | berm_violated | 1.794386e+06 | 1.968783e+06 | . 30500 2021-04-08 02:37:55.800 | -23.952180 | 28.890669 | 135.76300 | 21.95950 | 1125.466 | hv | berm_violated | 1.794400e+06 | 1.968647e+06 | . 30501 2021-04-08 02:37:55.900 | -23.952184 | 28.890674 | 137.10200 | 21.28388 | 1125.464 | hv | berm_violated | 1.794400e+06 | 1.968646e+06 | . 30502 2021-04-08 02:37:56.000 | -23.952188 | 28.890677 | 136.97700 | 21.23190 | 1125.506 | hv | berm_violated | 1.794401e+06 | 1.968646e+06 | . berm_x, berm_y = transform_points_crs( [p[&quot;lon&quot;] for p in custom_berm[&quot;points&quot;]], [p[&quot;lat&quot;] for p in custom_berm[&quot;points&quot;]], crs_from=&quot;EPSG:4326&quot;, crs_to=&quot;EPSG:9221&quot;, ) berm_pts = np.array([[x, y] for x, y in zip(berm_x, berm_y)]) berm_zone_pts = generate_berm_zone(berm_pts, min_dist=custom_berm[&quot;minDist&quot;]) print(berm_zone_pts[:, 0]) # Convert berm points from x, y to lon, lat berm_lon, berm_lat = transform_points_crs( berm_zone_pts[:, 0], berm_zone_pts[:, 1], crs_from=&quot;EPSG:9221&quot;, crs_to=&quot;EPSG:4326&quot;, ) plot_points_inside_zone( trip, compliance_event=&quot;berm_violated&quot;, zone_lon=berm_lon, zone_lat=berm_lat ) . [1794343.93249235 1794442.62388398 1794356.19658245 1794247.88152186 1794246.33063898 1794358.21337668 1794448.18637402 1794345.07064361] . stop_list = [ { &quot;points&quot;: [ {&quot;lat&quot;: -23.952352, &quot;lon&quot;: 28.890148}, ], }, { &quot;points&quot;: [ {&quot;lat&quot;: -23.950361, &quot;lon&quot;: 28.890181}, ], }, ] . stop_compliance_events = trip.check_stop_compliance(stops=stop_list) stop_compliance_events . check_stop_compliance did not detect any stop violations. . 123 points detected near the stop [1794346.4188976162, 1968629.2238745624] 18.8719781123105 0 points detected near the stop [1794357.204979564, 1968850.3731283841] 52.08973627270595 . datetime latitude longitude heading speed elevation uid compliance_event x y . 14762 2021-04-08 01:45:35.700 | -23.952196 | 28.890074 | 233.608 | 21.20341 | 1123.955 | hv | stop_violated | 1.794340e+06 | 1.968647e+06 | . trip.create_folium_map() trip.map.plot_state_markers( df=trip, states_column=&quot;compliance_event&quot;, colour_list=[&quot;#0437F2&quot;, &quot;#f2bf04&quot;, &quot;#f20437&quot;], plot_every=1, ) trip.map.add_categorical_legend( labels=[&quot;speed exceeded&quot;, &quot;berm violated&quot;, &quot;stop violated&quot;], colors=[&quot;#0437F2&quot;, &quot;#f2bf04&quot;, &quot;#f20437&quot;], ) trip.map . Make this Notebook Trusted to load map: File -&gt; Trust Notebook",
            "url": "https://jacoverster.github.io/ml-blog/tests/jupyter/2022/06/21/test_compliance_events.html",
            "relUrl": "/tests/jupyter/2022/06/21/test_compliance_events.html",
            "date": " • Jun 21, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jacoverster.github.io/ml-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jacoverster.github.io/ml-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I like to build real-world solutions using applied ML. I enjoy computer vision and Python. .",
          "url": "https://jacoverster.github.io/ml-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jacoverster.github.io/ml-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}